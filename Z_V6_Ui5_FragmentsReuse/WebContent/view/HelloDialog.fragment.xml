<core:FragmentDefinition
   xmlns="sap.m"
   xmlns:core="sap.ui.core" >
   <Dialog
      id="helloDialog"
      title="Salut {/recipient/name}">
      <content>
         <core:Icon
            src="sap-icon://hello-world"
            size="8rem"
            class="sapUiMediumMargin"/>
      </content>
      <beginButton>
         <Button
            text="{i18n>dialogCloseButtonText}"
            press=".onCloseDialog"/>
      </beginButton>
   </Dialog>
</core:FragmentDefinition>
<!-- 

We add a new XML file to declaratively define our dialog in a fragment. 
The fragment assets are located in the core namespace, so we add an xml namespace for it inside the FragmentDefinition tag.

The syntax is similar to a view, but since fragments do not have a controller this
 attribute is missing. Also, the fragment does not have any footprint in the DOM tree of the app, 
 and there is no control instance of the fragment itself (only the contained controls). It is simply a container 
 for a set of reuse controls.

We also add an id for our Dialog to be able to access the dialog from our HelloPanel controller.

In the fragment definition, we add a button to the beginButton aggregation of the dialog. 
The press handler is referring to an event handler called .onCloseDialog, and since we passed in the 
reference to the HelloPanel controller, the method will be invoked there when the button is pressed. 
The dialog has an aggregation named beginButton as well as endButton. Placing buttons in both of these aggregations 
makes sure that the beginButton is placed before the endButton on the UI. What before means, however, depends on the 
text direction of the current language. We therefore use the terms begin and end as a synonym to “left” and “right". 
In languages with left-to-right direction, the beginButton will be rendered left, the endButton on the right side of the 
dialog footer; in right-to-left mode for specific languages the order is switched.


 -->